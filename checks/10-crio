#!/usr/bin/env python

import sys

import toml

from checking.utils import Pathname, Rpm, Selinux, Systemd, log_error

# will be set to True on any failed confirm
error = False
FILES = []

with Rpm('cri-o') as rpm:
    if rpm.verify():
        FILES.extend(rpm.files)
    else:
        error = True

selinux = Selinux()
for path in FILES:
    error |= not selinux.verify(path)


def confirm(boolean, message):
    global error
    if not boolean:
        error = True
        log_error(message)


service = Systemd('crio.service')
confirm(service.isactive, 'crio.service is not active')
confirm(service.isenabled, 'crio.service is not enabled')

crio_conf = Pathname('/etc/crio/crio.conf')
crio_toml = toml.load(crio_conf)

confirm(
    crio_toml['crio']['runtime']['log_size_max'] > 0,
    'Unbounded container log sizes are not recommended in production'
)

val = ["registry.access.redhat.com", "docker.io"]
confirm(
    set(val).issubset(crio_toml['crio']['image'].get('registries', [])),
    'registries should contain "{}" for production in {}'.format(
        val, crio_conf.relpath
    )
)

var = 'plugin_dir'
val = ['/usr/libexec/cni', '/opt/cni/bin']
confirm(
    crio_toml['crio']['network'][var] in val,
    'Expected either "{}" for {} in {}'.format(val, var, crio_conf.relpath)
)

confirm(
    len(crio_toml['crio']['image'].get('insecure_registries', [])) == 0,
    'insecure_registries are not recommended in production in {}'.format(
        crio_conf.relpath
    )
)
sys.exit(0 if not error else 1)

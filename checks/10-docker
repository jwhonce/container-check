#!/usr/bin/env python

from contextlib import closing

from docker import DockerClient

from checking.utils import (Checked, Pathname, Rpm, Selinux, Systemd,
                            log_error, log_info, resolve_config)

PACKAGES = [
    'docker-client',
    'docker-common',
    'docker-rhel-push-plugin',
    'docker',
]
FILES = []

with Checked() as (confirm, error):

    # Check that packages on the host are as expected
    for pkg in PACKAGES:
        with Rpm(pkg) as rpm:
            if rpm.verify():
                FILES.extend(rpm.files)
            else:
                error(True)

    if not Selinux().verify(*FILES):
        error(True)

    with closing(DockerClient(base_url='unix://host/var/run/docker.sock',
                              version='auto')) as client:
        info = client.info()

    log_info('package version {}'.format(info['PkgVersion']))

    msg = (
        'One of "{}" is the recommended driver'
        ' in production rather than "{}"'
    )
    expected = ['overlay', 'overlay2']
    confirm(info['Driver'] in expected, msg.format(expected, info['Driver']))

    confirm(
        'rhel-push-plugin' in info['Plugins']['Authorization'],
        'rhel-push-plugin Authorization plugin is not configured'
    )

    confirm(
        info['BridgeNfIptables'],
        'container engine must be configured to use iptables'
    )

    confirm(
        info['LoggingDriver'] == 'json-file',
        '"json-file" is recommended for --log-driver in production not "{}"'.
        format(info['LoggingDriver'])
    )

    confirm([s for s in info['SecurityOptions'] if 'selinux' in s],
            'daemon running without "--selinux-enabled"')

    confirm(
        not info['ExperimentalBuild'],
        'Experimental builds should not be used in production'
    )

    confirm(
        info['CgroupDriver'] == 'systemd', (
            '"--exec-opt native.cgroupdriver=systemd" should '
            'be used in production not "{}"'
        ).format(info['CgroupDriver'])
    )

    file = Pathname('/etc/sysconfig/docker')
    config = resolve_config(file)
    required = ['OPTIONS', 'ADD_REGISTRY']

    missing = set(required).difference(config.keys())
    if missing:
        log_error(
            'Missing "{}" option(s) in {}'.format(
                ', '.join(missing), file.relpath
            )
        )

    var = 'OPTIONS'
    confirm(
        '--selinux-enabled' in config.get(var, ''),
        'Missing --selinux-enabled for {} in {}'.format(var, file.relpath)
    )

    confirm(
        '--insecure-registry' not in config.get(var, ''), (
            '"--insecure-registry" for {} in {}'
            ' should not be used in production'
        ).format(var, file.relpath)
    )

    var = 'ADD_REGISTRY'
    val = '--add-registry registry.access.redhat.com'
    confirm(
        val in config.get(var, ''),
        'Missing "{}" for {} in "{}"'.format(val, var, file.relpath)
    )

    file = Pathname('/etc/sysconfig/docker-storage')
    config = resolve_config(file)
    var = 'DOCKER_STORAGE_OPTIONS'
    confirm(
        var in config.keys(),
        'Missing "{}" option(s) in {}'.format(var, file.relpath)
    )

    val = '--storage-driver overlay2'
    confirm(
        val in config.get(var, ''),
        'Missing "{}" for {} in {}'.format(val, var, file.relpath)
    )

    service = Systemd('docker.service')
    confirm(service.isactive, 'docker.service is not active')
    confirm(service.isenabled, 'docker.service is not enabled')

    timer = Systemd('docker-cleanup.timer')
    confirm(timer.isactive, 'docker-cleanup.timer is not active')

#!/usr/bin/env python

import errno
import os
import pprint
import sys

import docker

from checking.utils import Rpm, Selinux

PACKAGES = [
    # 'docker-client',
    'docker-common',
    'docker-rhel-push-plugin',
    'docker',
]

# If package is not installed fail fast and early
missing = False
for pkg in PACKAGES:
    try:
        Rpm.verify(pkg)
    except OSError as e:
        sys.stderr.write(e.strerror)
        if e.errno == errno.ENOENT:
            missing = True
if missing is True:
    sys.exit(1)

# Check that files on the host are as expected
FILES = [
    '/etc/docker',
    '/etc/docker/certs.d',
    '/etc/docker/certs.d/redhat.com',
    '/etc/docker/certs.d/redhat.com/redhat-ca.crt',
    '/etc/docker/certs.d/redhat.io',
    '/etc/docker/certs.d/redhat.io/redhat-ca.crt',
    '/etc/docker/certs.d/registry.access.redhat.com',
    '/etc/docker/certs.d/registry.access.redhat.com/redhat-ca.crt',
    '/etc/docker/daemon.json',
    '/etc/docker/seccomp.json',
    '/etc/sysconfig/docker-network',
    '/etc/sysconfig/docker-storage-setup',
    '/etc/sysconfig/docker-storage',
    '/etc/sysconfig/docker',
    '/run/docker.sock',
    '/usr/bin/docker-containerd-current',
    '/usr/bin/docker-containerd-shim-current',
    '/usr/bin/docker-containerd-shim',
    '/usr/bin/docker-containerd',
    '/usr/bin/docker-ctr-current',
    '/usr/bin/docker-storage-setup',
    '/usr/bin/docker',
    '/usr/bin/dockerd-current',
    '/usr/lib/sysctl.d/99-docker.conf',
    '/usr/lib/systemd/system/docker-cleanup.service',
    '/usr/lib/systemd/system/docker-cleanup.timer',
    '/usr/lib/systemd/system/docker-storage-setup.service',
    '/usr/lib/systemd/system/docker.service',
    '/usr/lib/udev/rules.d/80-docker.rules',
    '/usr/libexec/docker',
    '/usr/libexec/docker/docker-init-current',
    '/usr/libexec/docker/docker-proxy-current',
    '/usr/libexec/docker/docker-runc-current',
    '/var/lib/docker',
]

error = False
for path in FILES:
    try:
        # Side effect: The existance of the 'path' will also be verified
        Selinux.verify(path)
    except OSError as e:
        sys.stderr.write('  {}\n'.format(str(e)))
        error = True
        continue

os.environ['DOCKER_HOST'] = 'unix://host/var/run/docker.sock'
client = docker.from_env(version='auto', assert_hostname=False)
info = client.info()
# pprint.PrettyPrinter(indent=4).pprint(info)

try:
    expected = ['overlay', 'overlay2']
    assert info['Driver'] in expected, \
        "  This container engine should be using Driver(s) {} rather than {}".\
        format(expected, info['Driver'])
except AssertionError as e:
    sys.stderr.write(e.message)

sys.exit(0 if not error else 1)

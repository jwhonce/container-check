#!/usr/bin/env python
"""1.5 Additional Process Hardening, see page 73."""

import fileinput
import re
from contextlib import closing

from checking.utils import (Checked, Pathname, Rpm, find_files, log_error,
                            log_info)
from systemd import journal


def search_files(pattern, files):
    regex = re.compile(pattern)
    with closing(fileinput.input(files)) as fd:
        for line in fd:
            if regex.search(line):
                return True
    return False


with Checked() as (confirm, error, augeas):
    limits = list(
        find_files(
            Pathname('/etc/security/limits.conf'),
            Pathname('/etc/security/limits.d'),
        ))

    sysctls = list(
        find_files(
            Pathname('/etc/sysctl.conf'),
            Pathname('/etc/sysctl.d'),
            Pathname('/run/sysctl.d'),
            Pathname('/usr/lib/sysctl.d'),
        ))

    confirm(
        search_files(r'^\*\shard\score\s0$', limits),
        'Hard limit on core dumps should be "0" on secure systems.')

    with open(Pathname('/proc/sys/fs/suid_dumpable')) as fd:
        suid_dumpable = int(fd.read())
        confirm(suid_dumpable == 0, 'fs.suid_dumpable is currently enabled.')
    confirm(
        search_files(r'fs\.suid_dumpable\s=\s0', sysctls),
        'SUID executables should be prevented'
        ' from dumping core on secure systems.')

    with open(Pathname('/proc/sys/kernel/randomize_va_space')) as fd:
        randomize_va_space = int(fd.read())
        confirm(randomize_va_space == 2, 'ASLR is currently disabled.')
    confirm(
        search_files(r'kernel\.randomize_va_space\s=\s2', sysctls),
        'ASLR should be enabled on secure systems.')

    re_nx = re.compile(r'NX.*protection:\sactive')
    with journal.Reader(path=Pathname('/var/log/journal')) as jrnl:
        jrnl.this_boot()
        jrnl.add_match(SYSLOG_IDENTIFIER=u'kernel')
        for entry in jrnl:
            if re_nx.search(entry['MESSAGE']):
                log_info(entry['MESSAGE'])
                break
        else:
            log_error('NX (Execute Disable) protection is not enabled.')
            error(True)

    confirm(not Rpm('prelink').isinstalled,
            '"prelink" should not be enabled on secure systems.')

#!/usr/bin/env python
"""Command to verify host is configured correctly for container tools"""

import argparse
import curses
import logging
import os
import sys

from checking import Checker, LoggerAdapter, __version__


class Main(object):
    @classmethod
    def get_parser(cls):
        class HelpFormatter(argparse.ArgumentDefaultsHelpFormatter,
                            argparse.RawDescriptionHelpFormatter):
            """Combine provided formatters and set width to screen size"""

            def __init__(self, *args, **kwargs):
                if 'width' not in kwargs:
                    kwargs['width'] = 80
                    try:
                        height, width = curses.initscr().getmaxyx()
                        kwargs['width'] = width
                    finally:
                        curses.endwin()
                super(HelpFormatter, self).__init__(*args, **kwargs)

        help_epilog = """
  Example(s):

  $ export VOLUMES=\\
    -v /etc:/host/etc:ro \\
    -v /run:/host/run:ro \\
    -v /sys:/host/sys:ro \\
    -v /usr:/host/usr:ro \\
    -v /var:/host/var:ro

  $ container run...--privileged ${VOLUMES} ./container_check
  $ container run...--privileged ${VOLUMES} ./container_check --debug
  $ container run...--privileged ${VOLUMES} ./container_check \\
    --checks ./checks:/host/checks
"""
        parser = argparse.ArgumentParser(
            description='Command to verify container configuration on host',
            formatter_class=HelpFormatter,
            add_help=True,
            epilog=help_epilog
        )
        parser.add_argument(
            '-d',
            '--debug',
            action='store_true',
            help='Turn on logging of debugging events'
        )
        parser.add_argument(
            '--version', action='version', version='%(prog)s v' + __version__
        )
        parser.add_argument(
            '-c',
            '--checks',
            default='./checks',
            help='Path(s) to checks to execute. Formatted like system PATH.'
        )
        format = '%(asctime)s | %(levelname)-7s | %(script)-20s | %(message)s'
        parser.add_argument(
            '-f',
            '--format',
            default=format,
            help=(
                'Override default logging format.'
                ' Custom supported attributes(s): script.'
                ' See "https://docs.python.org/library/logging.html"'
            )
        )
        return parser

    @classmethod
    def get_logger(cls, args):
        level = logging.DEBUG if args.debug else logging.INFO
        logging.basicConfig(
            level=level, format=args.format, datefmt='%Y-%m-%d %H:%M:%S'
        )
        log = LoggerAdapter(logging.getLogger(), {'script': ''})
        log.debug(
            'Logging initialized at level {}'.format(
                logging.getLevelName(logging.getLogger().getEffectiveLevel())
            )
        )
        return log

    @classmethod
    def apply(cls, args):
        found_file = False
        error = False
        for directory in args.checks.split(os.pathsep):
            if not os.path.isdir(directory):
                args.log.error(
                    '"{}" is not an existing directory'.format(directory)
                )
                error = True
                continue

            check = Checker(args.debug)
            for path, _, files in os.walk(directory):
                for file in files:
                    found_file = True
                    if not check.check(os.path.join(path, file)):
                        error = True

        if not found_file:
            args.log.error('"{}" contain no checks'.format(args.checks))
            return 1
        elif error:
            return 2
        else:
            return 0


if __name__ == '__main__':  # pragma: no cover
    parser = Main.get_parser()
    args = parser.parse_args()

    log = Main.get_logger(args)
    setattr(args, 'log', log)

    result = Main.apply(args)
    sys.exit(result)

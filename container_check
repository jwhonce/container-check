#!/usr/bin/env python
"""Command to verify host is configured correctly for container tools"""

import argparse
import logging
import os
import sys

from checking import Checker, LoggerAdapter, __version__


class Main(object):
    @staticmethod
    def get_parser():
        class HelpFormatter(argparse.ArgumentDefaultsHelpFormatter):
            def __init__(
                    self,
                    prog,
                    indent_increment=2,
                    max_help_position=15,
                    width=None
            ):
                super(HelpFormatter, self).__init__(
                    prog=prog,
                    indent_increment=indent_increment,
                    max_help_position=15,
                    width=width
                )

        parser = argparse.ArgumentParser(
            description='Command to verify container configuration on host',
            formatter_class=HelpFormatter,
            add_help=True,
            epilog=None
        )
        parser.add_argument(
            '-d', '--debug', action='store_true', help='Turn on debug logging'
        )
        parser.add_argument(
            '--version', action='version', version='%(prog)s ' + __version__
        )
        parser.add_argument(
            '-c',
            '--checks',
            nargs='?',
            default='./checks',
            help='Path to checks to execute'
        )
        format = '%(asctime)s | %(levelname)-7s | %(script)-20s | %(message)s'
        parser.add_argument(
            '-f',
            '--format',
            nargs='?',
            default=format,
            help=(
                'Override default logging format.'
                ' Custom supported attributes(s): script.'
                ' See "https://docs.python.org/2/library/logging.html"'
            )
        )
        return parser

    @staticmethod
    def get_logger(args):
        level = logging.DEBUG if args.debug else logging.INFO
        logging.basicConfig(
            level=level, format=args.format, datefmt='%Y-%m-%d %H:%M:%S'
        )
        log = LoggerAdapter(logging.getLogger(), {'script': ''})
        log.debug(
            'Logging initialized at level {}'.format(
                logging.getLevelName(logging.getLogger().getEffectiveLevel())
            )
        )
        return log

    @staticmethod
    def apply(args):
        found_file = False
        error = False
        for directory in args.checks.split(os.pathsep):
            if not os.path.isdir(directory):
                args.log.error(
                    '"{}" is not an existing directory'.format(directory)
                )
                error = True
                continue

            check = Checker(args.debug)
            for path, _, files in os.walk(directory):
                for file in files:
                    found_file = True
                    if not check.check(os.path.join(path, file)):
                        error = True

        if not found_file:
            args.log.error('"{}" contain no checks'.format(args.checks))
            return 1
        elif error:
            return 2
        else:
            return 0


if __name__ == '__main__':  # pragma: no cover
    parser = Main.get_parser()
    args = parser.parse_args()

    log = Main.get_logger(args)
    setattr(args, 'log', log)

    result = Main.apply(args)
    sys.exit(result)
